#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define NUM_THREADS 10

int random_numbers[NUM_THREADS];        // 存储结果
pthread_mutex_t lock;                   // 互斥锁，用于线程安全

void* generate_random(void* arg) {
    int index = *(int*)arg;
    unsigned int seed = time(NULL) ^ index ^ pthread_self();  // 每个线程不同的 seed

    int r = rand_r(&seed) % 100;  // 生成 0~99 的随机数

    pthread_mutex_lock(&lock);    // 写入共享数组前加锁
    random_numbers[index] = r;
    pthread_mutex_unlock(&lock);

    free(arg);  // 释放动态申请的参数内存
    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&lock, NULL);

    for (int i = 0; i < NUM_THREADS; i++) {
        int* idx = malloc(sizeof(int));
        *idx = i;
        if (pthread_create(&threads[i], NULL, generate_random, idx) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Generated random numbers:\n");
    for (int i = 0; i < NUM_THREADS; i++) {
        printf("%d ", random_numbers[i]);
    }
    printf("\n");

    pthread_mutex_destroy(&lock);
    return 0;
}
